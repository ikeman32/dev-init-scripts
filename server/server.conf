#This is the config file for your server development setup. 

#===========> IMPORTANT READ THIS SECTION CAREFULLY!<=====================

#This config file contains all the variables used int the server-init.sh file and they are there to be
#edited as you see fit. If you wish to forgo any portion of the setup set the variable to echo like so:
#
#dependencies='echo' <===The init script will continue with next line in the script.

#For your convenience the defaults have been commented out for easy restoration in case of an error and you
#need to reset.

#<========================================================================================>

#==============================>Dependencies<==============================================
#Defaults
#dependencies='bcryptjs cors dotenv express helmet jsonwebtoken knex morgan sqlite3'

dependencies='bcryptjs cors dotenv express helmet jsonwebtoken knex morgan sqlite3'

#To bypass installing dependencies uncomment the line below be sure to comment the line above
#dependencies='echo'



#==============================>Dev Dependencies<==============================================
#Edit development dependencies that you want included in the setup. Separate each dependencies with a space.
#Defaults
#dev_dependencies='cross-env jest nodemon supertest'

dev_dependencies='cross-env jest nodemon supertest'

#To bypass installing dev_dependencies uncomment the line below be sure to comment the line above
#dev_dependencies='echo'


#==============================>Directory Structure<==============================================
#Directory Structure
#Edit the directory structure you desire separate each directory with a space.
#Defaults
#dir='database api database/migrations database/seeds users'
dir='database api auth database/migrations database/seeds users'


#==============================>DB Config file setup<==============================================
#Default Database config file.
#db_config=$'const knex = require("knex");\n
#const knexfile = require("../knexfile.js");\n
#const environment = process.env.DB_ENV || "development";\n
#module.exports = knex(knexfile[environment]);'

db_config=$'require("dotenv").config();

const knex = require("knex");

const knexfile = require("../knexfile.js");

const environment = process.env.DB_ENV;

module.exports = knex(knexfile[environment]);'


#==============================>Environment file setup<==============================================
#Defalt environment file
#env=$'DB_ENV = development

#JWT_SECRET = "In the beginning God created the heavens and the Earth."

#PORT = 3300'

env=$'DB_ENV = development

JWT_SECRET = "In the beginning God created the heavens and the Earth."

PORT = 3300'


#==============================>Server index.js file setup<==============================================
#Server index default

#index=$'require("dotenv").config();

#const server = require("./api/server.js");

#const port = process.env.PORT;
#server.listen(port, () => console.log(`\n** server up on port ${port} **\n`));'

index=$'require("dotenv").config();

const server = require("./api/server.js");

const port = process.env.PORT;
server.listen(port, () => console.log("\n** server up on port ${port} **\n"));'

#==============================>server.js setup<==============================================
#Default server
#server=$'require("dotenv").config();
#const express = require("express"); 
#const helmet = require("helmet");
#const cors = require("cors");
#const morgan = require(`morgan`);

#//Middleware
#const authenticate = require("./authenticate-middleware.js")

#//Routers
#const auth_router = require("../auth/auth_router.js");
#const user_router = require("../users/user_router.js");

#const server = express();

#server.use(helmet());
#server.use(morgan("dev"));
#server.use(express.json());
#server.use(cors());

#//Routes
#server.use("/api/auth", auth_router);
#server.use("/apit/user", authenticate, user_router);

#server.get("/", (req, res) => {
#  res.status(200).json({ api: "up", dbenv: process.env.DB_ENV });
#});

#module.exports = server;'

server=$'require("dotenv").config();
const express = require("express"); 
const helmet = require("helmet");
const cors = require("cors");
const morgan = require(`morgan`);

//Middleware
const authenticate = require("./authenticate-middleware.js")

//Routers
const auth_router = require("../auth/auth_router.js");
const user_router = require("../users/user_router.js");

const server = express();

server.use(helmet());
server.use(morgan("dev"));
server.use(express.json());
server.use(cors());

//Routes
server.use("/api/auth", auth_router);
server.use("/apit/user", authenticate, user_router);

server.get("/", (req, res) => {
  res.status(200).json({ api: "up", dbenv: process.env.DB_ENV });
});

module.exports = server;' 

#==============================>Router file setup <==============================================
#Default 

#routers='auth/auth_router.js users/users_router.js
routers='auth/auth_router.js users/users_router.js'


#==============================>Authentication middleware<==============================================
#Default authentication middleware
#auth_middleware=$'require("dotenv").config();
#const jwt = require("jsonwebtoken"); // installed this

#module.exports = (req, res, next) => {
#  const { authorization } = req.headers;

#  if (authorization) {
#    const secret = process.env.JWT_SECRET;

#    jwt.verify(authorization, secret, function(err, decodedToken) {
#      if (err) {
#        res.status(401).json({ message: "Invalid Token" });
#      } else {
#        req.token = decodedToken;

#        next();
#      }
#    });
#  } else {
#    res.status(400).json({ message: "Please login and try again" });
#  }
#};'


auth_middleware=$'require("dotenv").config();
const jwt = require("jsonwebtoken"); // installed this

module.exports = (req, res, next) => {
  const { authorization } = req.headers;

  if (authorization) {
    const secret = process.env.JWT_SECRET;

    jwt.verify(authorization, secret, function(err, decodedToken) {
      if (err) {
        res.status(401).json({ message: "Invalid Token" });
      } else {
        req.token = decodedToken;

        next();
      }
    });
  } else {
    res.status(400).json({ message: "Please login and try again" });
  }
};'

#==============================>knexfile.js setup<==============================================
#Default knexfile
#module.exports = {
#  development: {
#    client: "sqlite3",
#    connection: {
#      filename: "./database/data.db3",
#    },
#    useNullAsDefault: true,
#    migrations: {
#      directory: "./database/migrations",
#    },
#    seeds: {
#      directory: "./database/seeds",
#    },
#    pool: {
#      afterCreate: (conn, done) => {
#        conn.run("PRAGMA foreign_keys = ON", done);
#      },
#    },
#  },

#  testing: {
#    client: "sqlite3",
#    connection: {
#      filename: "./database/test.db3",
#    },
#    useNullAsDefault: true,
#    pool: {
#      afterCreate: (conn, done) => {
#        conn.run("PRAGMA foreign_keys = ON", done);
#      },
#    },
#    migrations: {
#      directory: "./database/migrations",
#    },
#    seeds: {
#      directory: "./database/seeds",
#    },
#  },

#  production: {
#    client: "pg", // install this npm package
#    connection: process.env.DATABASE_URL,
#    migrations: {
#      directory: "./database/migrations",
#    },
#    seeds: {
#      directory: "./database/seeds",
#    },
#  }
#};


knexfile=$'module.exports = {
  development: {
    client: "sqlite3",
    connection: {
      filename: "./database/data.db3",
    },
    useNullAsDefault: true,
    migrations: {
      directory: "./database/migrations",
    },
    seeds: {
      directory: "./database/seeds",
    },
    pool: {
      afterCreate: (conn, done) => {
        conn.run("PRAGMA foreign_keys = ON", done);
      },
    },
  },

  testing: {
    client: "sqlite3",
    connection: {
      filename: "./database/test.db3",
    },
    useNullAsDefault: true,
    pool: {
      afterCreate: (conn, done) => {
        conn.run("PRAGMA foreign_keys = ON", done);
      },
    },
    migrations: {
      directory: "./database/migrations",
    },
    seeds: {
      directory: "./database/seeds",
    },
  },

  production: {
    client: "pg", // install this npm package
    connection: process.env.DATABASE_URL,
    migrations: {
      directory: "./database/migrations",
    },
    seeds: {
      directory: "./database/seeds",
    },
  }
};'

#==============================>Auth helper file setup<==============================================
#Default
#auth_model=$'const db = require("../database/dbConfig");

#const tblAuth = "[dbName]";//define the users table name

#module.exports = {
#  add,
#  find,
#  findBy,
#  findById,
#};

#function find() {
#  return db(tblAut).select("id", "username");
#}

#function findBy(filter) {
#  return db(tblAuth).where(filter);
#}

#async function add(user) {
#  const [id] = await db(tblAuth).insert(user);

#  return findById(id);
#}

#function findById(id) {
#  return db(tblAuth)
#    .where({ id })
#    .first();
#}'


auth_model=$'const db = require("../database/dbConfig");

const tblAuth = "[dbName]";//define the users table name

module.exports = {
  add,
  find,
  findBy,
  findById,
};

function find() {
  return db(tblAut).select("id", "username");
}

function findBy(filter) {
  return db(tblAuth).where(filter);
}

async function add(user) {
  const [id] = await db(tblAuth).insert(user);

  return findById(id);
}

function findById(id) {
  return db(tblAuth)
    .where({ id })
    .first();
}'


#==============================>User helper file setup<==============================================
#Default
#user_model=$'const db = require("../database/dbConfig");

#const tblUsers = "chefs";//define the users table name

#module.exports = {
#  add,
#  find,
#  findBy,
#  findById,
#};

#function find() {
#  return db(tblUsers).select("id", "username");
#}

#function findBy(filter) {
#  return db(tblUsers).where(filter);
#}

#async function add(user) {
#  const [id] = await db(tblUsers).insert(user);

#  return findById(id);
#}

#function findById(id) {
#  return db(tblUsers)
#    .where({ id })
#    .first();
#}'

user_model=$'const db = require("../database/dbConfig");

const tblUsers = "chefs";//define the users table name

module.exports = {
  add,
  find,
  findBy,
  findById,
};

function find() {
  return db(tblUsers).select("id", "username");
}

function findBy(filter) {
  return db(tblUsers).where(filter);
}

async function add(user) {
  const [id] = await db(tblUsers).insert(user);

  return findById(id);
}

function findById(id) {
  return db(tblUsers)
    .where({ id })
    .first();
}'

#==============================>Run git<==============================================
#Default
#git=$'git add .&& git commit "initial commit"&&  git push -u oigin master'

git=$'git add .&&  git commit -m "initial commit"&&  git push -u origin master'

#Creator/Contributor: ikeman32:David Isakson 